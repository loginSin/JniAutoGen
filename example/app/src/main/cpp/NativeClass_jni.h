// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/java/jniautogendemo/NativeClass

#ifndef com_java_jniautogendemo_NativeClass_JNI
#define com_java_jniautogendemo_NativeClass_JNI

#include <jni.h>

#include "sdk/android/api/jni/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_com_java_jniautogendemo_NativeClass[];
const char kClassPath_com_java_jniautogendemo_NativeClass[] = "com/java/jniautogendemo/NativeClass";

JNI_REGISTRATION_EXPORT extern const char
        kClassPath_com_java_jniautogendemo_NativeClass_00024JniUserInfoCallback[];
const char kClassPath_com_java_jniautogendemo_NativeClass_00024JniUserInfoCallback[] =
        "com/java/jniautogendemo/NativeClass$JniUserInfoCallback";

JNI_REGISTRATION_EXPORT extern const char
        kClassPath_com_java_jniautogendemo_NativeClass_00024JniListener[];
const char kClassPath_com_java_jniautogendemo_NativeClass_00024JniListener[] =
        "com/java/jniautogendemo/NativeClass$JniListener";

JNI_REGISTRATION_EXPORT extern const char
        kClassPath_com_java_jniautogendemo_NativeClass_00024UserInfo[];
const char kClassPath_com_java_jniautogendemo_NativeClass_00024UserInfo[] =
        "com/java/jniautogendemo/NativeClass$UserInfo";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_com_java_jniautogendemo_NativeClass_clazz(nullptr);
#ifndef com_java_jniautogendemo_NativeClass_clazz_defined
#define com_java_jniautogendemo_NativeClass_clazz_defined
inline jclass com_java_jniautogendemo_NativeClass_clazz(JNIEnv* env) {
    return base::android::LazyGetClass(env, kClassPath_com_java_jniautogendemo_NativeClass,
                                       &g_com_java_jniautogendemo_NativeClass_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
        g_com_java_jniautogendemo_NativeClass_00024JniUserInfoCallback_clazz(nullptr);
#ifndef com_java_jniautogendemo_NativeClass_00024JniUserInfoCallback_clazz_defined
#define com_java_jniautogendemo_NativeClass_00024JniUserInfoCallback_clazz_defined
inline jclass com_java_jniautogendemo_NativeClass_00024JniUserInfoCallback_clazz(JNIEnv* env) {
    return base::android::LazyGetClass(env,
                                       kClassPath_com_java_jniautogendemo_NativeClass_00024JniUserInfoCallback,
                                       &g_com_java_jniautogendemo_NativeClass_00024JniUserInfoCallback_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
        g_com_java_jniautogendemo_NativeClass_00024JniListener_clazz(nullptr);
#ifndef com_java_jniautogendemo_NativeClass_00024JniListener_clazz_defined
#define com_java_jniautogendemo_NativeClass_00024JniListener_clazz_defined
inline jclass com_java_jniautogendemo_NativeClass_00024JniListener_clazz(JNIEnv* env) {
    return base::android::LazyGetClass(env,
                                       kClassPath_com_java_jniautogendemo_NativeClass_00024JniListener,
                                       &g_com_java_jniautogendemo_NativeClass_00024JniListener_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
        g_com_java_jniautogendemo_NativeClass_00024UserInfo_clazz(nullptr);
#ifndef com_java_jniautogendemo_NativeClass_00024UserInfo_clazz_defined
#define com_java_jniautogendemo_NativeClass_00024UserInfo_clazz_defined
inline jclass com_java_jniautogendemo_NativeClass_00024UserInfo_clazz(JNIEnv* env) {
    return base::android::LazyGetClass(env,
                                       kClassPath_com_java_jniautogendemo_NativeClass_00024UserInfo,
                                       &g_com_java_jniautogendemo_NativeClass_00024UserInfo_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace RongCloud {

    static jint JNI_NativeClass_GetInt(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
                                       jint value);

    JNI_GENERATOR_EXPORT jint Java_com_java_jniautogendemo_NativeClass_nativeGetInt(
            JNIEnv* env,
            jobject jcaller,
            jint value) {
        return JNI_NativeClass_GetInt(env, base::android::JavaParamRef<jobject>(env, jcaller), value);
    }

    static base::android::ScopedJavaLocalRef<jintArray> JNI_NativeClass_GetIntArray(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
                                                                                    const base::android::JavaParamRef<jintArray>& value);

    JNI_GENERATOR_EXPORT jintArray Java_com_java_jniautogendemo_NativeClass_nativeGetIntArray(
            JNIEnv* env,
            jobject jcaller,
            jintArray value) {
        return JNI_NativeClass_GetIntArray(env, base::android::JavaParamRef<jobject>(env, jcaller),
                                           base::android::JavaParamRef<jintArray>(env, value)).Release();
    }

    static jdouble JNI_NativeClass_GetDouble(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
                                             jdouble value);

    JNI_GENERATOR_EXPORT jdouble Java_com_java_jniautogendemo_NativeClass_nativeGetDouble(
            JNIEnv* env,
            jobject jcaller,
            jdouble value) {
        return JNI_NativeClass_GetDouble(env, base::android::JavaParamRef<jobject>(env, jcaller), value);
    }

    static base::android::ScopedJavaLocalRef<jdoubleArray> JNI_NativeClass_GetDoubleArray(JNIEnv* env,
                                                                                          const base::android::JavaParamRef<jobject>& jcaller,
                                                                                          const base::android::JavaParamRef<jdoubleArray>& value);

    JNI_GENERATOR_EXPORT jdoubleArray Java_com_java_jniautogendemo_NativeClass_nativeGetDoubleArray(
            JNIEnv* env,
            jobject jcaller,
            jdoubleArray value) {
        return JNI_NativeClass_GetDoubleArray(env, base::android::JavaParamRef<jobject>(env, jcaller),
                                              base::android::JavaParamRef<jdoubleArray>(env, value)).Release();
    }

    static jlong JNI_NativeClass_GetLong(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
                                         jlong value);

    JNI_GENERATOR_EXPORT jlong Java_com_java_jniautogendemo_NativeClass_nativeGetLong(
            JNIEnv* env,
            jobject jcaller,
            jlong value) {
        return JNI_NativeClass_GetLong(env, base::android::JavaParamRef<jobject>(env, jcaller), value);
    }

    static base::android::ScopedJavaLocalRef<jlongArray> JNI_NativeClass_GetLongArray(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
                                                                                      const base::android::JavaParamRef<jlongArray>& value);

    JNI_GENERATOR_EXPORT jlongArray Java_com_java_jniautogendemo_NativeClass_nativeGetLongArray(
            JNIEnv* env,
            jobject jcaller,
            jlongArray value) {
        return JNI_NativeClass_GetLongArray(env, base::android::JavaParamRef<jobject>(env, jcaller),
                                            base::android::JavaParamRef<jlongArray>(env, value)).Release();
    }

    static jboolean JNI_NativeClass_GetBoolean(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
                                               jboolean value);

    JNI_GENERATOR_EXPORT jboolean Java_com_java_jniautogendemo_NativeClass_nativeGetBoolean(
            JNIEnv* env,
            jobject jcaller,
            jboolean value) {
        return JNI_NativeClass_GetBoolean(env, base::android::JavaParamRef<jobject>(env, jcaller), value);
    }

    static base::android::ScopedJavaLocalRef<jbooleanArray> JNI_NativeClass_GetBooleanArray(JNIEnv* env,
                                                                                            const base::android::JavaParamRef<jobject>& jcaller,
                                                                                            const base::android::JavaParamRef<jbooleanArray>& value);

    JNI_GENERATOR_EXPORT jbooleanArray Java_com_java_jniautogendemo_NativeClass_nativeGetBooleanArray(
            JNIEnv* env,
            jobject jcaller,
            jbooleanArray value) {
        return JNI_NativeClass_GetBooleanArray(env, base::android::JavaParamRef<jobject>(env, jcaller),
                                               base::android::JavaParamRef<jbooleanArray>(env, value)).Release();
    }

    static jbyte JNI_NativeClass_GetByte(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
                                         jbyte value);

    JNI_GENERATOR_EXPORT jbyte Java_com_java_jniautogendemo_NativeClass_nativeGetByte(
            JNIEnv* env,
            jobject jcaller,
            jbyte value) {
        return JNI_NativeClass_GetByte(env, base::android::JavaParamRef<jobject>(env, jcaller), value);
    }

    static base::android::ScopedJavaLocalRef<jbyteArray> JNI_NativeClass_GetByteArray(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
                                                                                      const base::android::JavaParamRef<jbyteArray>& value);

    JNI_GENERATOR_EXPORT jbyteArray Java_com_java_jniautogendemo_NativeClass_nativeGetByteArray(
            JNIEnv* env,
            jobject jcaller,
            jbyteArray value) {
        return JNI_NativeClass_GetByteArray(env, base::android::JavaParamRef<jobject>(env, jcaller),
                                            base::android::JavaParamRef<jbyteArray>(env, value)).Release();
    }

    static base::android::ScopedJavaLocalRef<jstring> JNI_NativeClass_GetString(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
                                                                                const base::android::JavaParamRef<jstring>& value);

    JNI_GENERATOR_EXPORT jstring Java_com_java_jniautogendemo_NativeClass_nativeGetString(
            JNIEnv* env,
            jobject jcaller,
            jstring value) {
        return JNI_NativeClass_GetString(env, base::android::JavaParamRef<jobject>(env, jcaller),
                                         base::android::JavaParamRef<jstring>(env, value)).Release();
    }

    static base::android::ScopedJavaLocalRef<jobjectArray> JNI_NativeClass_GetStringArray(JNIEnv* env,
                                                                                          const base::android::JavaParamRef<jobject>& jcaller,
                                                                                          const base::android::JavaParamRef<jobjectArray>& value);

    JNI_GENERATOR_EXPORT jobjectArray Java_com_java_jniautogendemo_NativeClass_nativeGetStringArray(
            JNIEnv* env,
            jobject jcaller,
            jobjectArray value) {
        return JNI_NativeClass_GetStringArray(env, base::android::JavaParamRef<jobject>(env, jcaller),
                                              base::android::JavaParamRef<jobjectArray>(env, value)).Release();
    }

    static base::android::ScopedJavaLocalRef<jobject> JNI_NativeClass_GetUserInfoArrayList(JNIEnv* env,
                                                                                           const base::android::JavaParamRef<jobject>& jcaller);

    JNI_GENERATOR_EXPORT jobject Java_com_java_jniautogendemo_NativeClass_nativeGetUserInfoArrayList(
            JNIEnv* env,
            jobject jcaller) {
        return JNI_NativeClass_GetUserInfoArrayList(env, base::android::JavaParamRef<jobject>(env,
                                                                                              jcaller)).Release();
    }

    static base::android::ScopedJavaLocalRef<jobject> JNI_NativeClass_GetHashMap(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller);

    JNI_GENERATOR_EXPORT jobject Java_com_java_jniautogendemo_NativeClass_nativeGetHashMap(
            JNIEnv* env,
            jobject jcaller) {
        return JNI_NativeClass_GetHashMap(env, base::android::JavaParamRef<jobject>(env,
                                                                                    jcaller)).Release();
    }

    static base::android::ScopedJavaLocalRef<jobject> JNI_NativeClass_GetUserInfo(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
                                                                                  const base::android::JavaParamRef<jstring>& uid);

    JNI_GENERATOR_EXPORT jobject Java_com_java_jniautogendemo_NativeClass_nativeGetUserInfo(
            JNIEnv* env,
            jobject jcaller,
            jstring uid) {
        return JNI_NativeClass_GetUserInfo(env, base::android::JavaParamRef<jobject>(env, jcaller),
                                           base::android::JavaParamRef<jstring>(env, uid)).Release();
    }

    static base::android::ScopedJavaLocalRef<jobjectArray> JNI_NativeClass_GetUserInfoArray(JNIEnv* env,
                                                                                            const base::android::JavaParamRef<jobject>& jcaller,
                                                                                            const base::android::JavaParamRef<jobjectArray>& value);

    JNI_GENERATOR_EXPORT jobjectArray Java_com_java_jniautogendemo_NativeClass_nativeGetUserInfoArray(
            JNIEnv* env,
            jobject jcaller,
            jobjectArray value) {
        return JNI_NativeClass_GetUserInfoArray(env, base::android::JavaParamRef<jobject>(env, jcaller),
                                                base::android::JavaParamRef<jobjectArray>(env, value)).Release();
    }

    static void JNI_NativeClass_FetchUserInfo(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
                                              const base::android::JavaParamRef<jstring>& uid,
                                              const base::android::JavaParamRef<jobject>& callback);

    JNI_GENERATOR_EXPORT void Java_com_java_jniautogendemo_NativeClass_nativeFetchUserInfo(
            JNIEnv* env,
            jobject jcaller,
            jstring uid,
            jobject callback) {
        return JNI_NativeClass_FetchUserInfo(env, base::android::JavaParamRef<jobject>(env, jcaller),
                                             base::android::JavaParamRef<jstring>(env, uid), base::android::JavaParamRef<jobject>(env,
                                                                                                                                  callback));
    }

    static void JNI_NativeClass_SetListener(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
                                            const base::android::JavaParamRef<jobject>& listener);

    JNI_GENERATOR_EXPORT void Java_com_java_jniautogendemo_NativeClass_nativeSetListener(
            JNIEnv* env,
            jobject jcaller,
            jobject listener) {
        return JNI_NativeClass_SetListener(env, base::android::JavaParamRef<jobject>(env, jcaller),
                                           base::android::JavaParamRef<jobject>(env, listener));
    }

    static void JNI_NativeClass_CallListener(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

    JNI_GENERATOR_EXPORT void Java_com_java_jniautogendemo_NativeClass_nativeCallListener(
            JNIEnv* env,
            jobject jcaller) {
        return JNI_NativeClass_CallListener(env, base::android::JavaParamRef<jobject>(env, jcaller));
    }


    static std::atomic<jmethodID>
            g_com_java_jniautogendemo_NativeClass_00024JniUserInfoCallback_onCallback(nullptr);
    static void Java_JniUserInfoCallback_onCallback(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& user) {
        jclass clazz = com_java_jniautogendemo_NativeClass_00024JniUserInfoCallback_clazz(env);
        CHECK_CLAZZ(env, obj.obj(),
                    com_java_jniautogendemo_NativeClass_00024JniUserInfoCallback_clazz(env));

        jni_generator::JniJavaCallContextChecked call_context;
        call_context.Init<
                base::android::MethodID::TYPE_INSTANCE>(
                env,
                clazz,
                "onCallback",
                "(Lcom/java/jniautogendemo/NativeClass$UserInfo;)V",
                &g_com_java_jniautogendemo_NativeClass_00024JniUserInfoCallback_onCallback);

        env->CallVoidMethod(obj.obj(),
                            call_context.base.method_id, user.obj());
    }

    static std::atomic<jmethodID>
            g_com_java_jniautogendemo_NativeClass_00024JniListener_onListener(nullptr);
    static void Java_JniListener_onListener(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
                                            JniIntWrapper value) {
        jclass clazz = com_java_jniautogendemo_NativeClass_00024JniListener_clazz(env);
        CHECK_CLAZZ(env, obj.obj(),
                    com_java_jniautogendemo_NativeClass_00024JniListener_clazz(env));

        jni_generator::JniJavaCallContextChecked call_context;
        call_context.Init<
                base::android::MethodID::TYPE_INSTANCE>(
                env,
                clazz,
                "onListener",
                "(I)V",
                &g_com_java_jniautogendemo_NativeClass_00024JniListener_onListener);

        env->CallVoidMethod(obj.obj(),
                            call_context.base.method_id, as_jint(value));
    }

    static std::atomic<jmethodID>
            g_com_java_jniautogendemo_NativeClass_00024UserInfo_Constructor(nullptr);
    static base::android::ScopedJavaLocalRef<jobject> Java_UserInfo_Constructor(JNIEnv* env) {
        jclass clazz = com_java_jniautogendemo_NativeClass_00024UserInfo_clazz(env);
        CHECK_CLAZZ(env, clazz,
                    com_java_jniautogendemo_NativeClass_00024UserInfo_clazz(env), NULL);

        jni_generator::JniJavaCallContextChecked call_context;
        call_context.Init<
                base::android::MethodID::TYPE_INSTANCE>(
                env,
                clazz,
                "<init>",
                "()V",
                &g_com_java_jniautogendemo_NativeClass_00024UserInfo_Constructor);

        jobject ret =
                env->NewObject(clazz,
                               call_context.base.method_id);
        return base::android::ScopedJavaLocalRef<jobject>(env, ret);
    }

    static std::atomic<jmethodID> g_com_java_jniautogendemo_NativeClass_00024UserInfo_setUid(nullptr);
    static void Java_UserInfo_setUid(JNIEnv* env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jstring>& uid) {
        jclass clazz = com_java_jniautogendemo_NativeClass_00024UserInfo_clazz(env);
        CHECK_CLAZZ(env, obj.obj(),
                    com_java_jniautogendemo_NativeClass_00024UserInfo_clazz(env));

        jni_generator::JniJavaCallContextChecked call_context;
        call_context.Init<
                base::android::MethodID::TYPE_INSTANCE>(
                env,
                clazz,
                "setUid",
                "(Ljava/lang/String;)V",
                &g_com_java_jniautogendemo_NativeClass_00024UserInfo_setUid);

        env->CallVoidMethod(obj.obj(),
                            call_context.base.method_id, uid.obj());
    }

    static std::atomic<jmethodID> g_com_java_jniautogendemo_NativeClass_00024UserInfo_setName(nullptr);
    static void Java_UserInfo_setName(JNIEnv* env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jstring>& name) {
        jclass clazz = com_java_jniautogendemo_NativeClass_00024UserInfo_clazz(env);
        CHECK_CLAZZ(env, obj.obj(),
                    com_java_jniautogendemo_NativeClass_00024UserInfo_clazz(env));

        jni_generator::JniJavaCallContextChecked call_context;
        call_context.Init<
                base::android::MethodID::TYPE_INSTANCE>(
                env,
                clazz,
                "setName",
                "(Ljava/lang/String;)V",
                &g_com_java_jniautogendemo_NativeClass_00024UserInfo_setName);

        env->CallVoidMethod(obj.obj(),
                            call_context.base.method_id, name.obj());
    }

    static std::atomic<jmethodID> g_com_java_jniautogendemo_NativeClass_00024UserInfo_setAge(nullptr);
    static void Java_UserInfo_setAge(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
                                     JniIntWrapper age) {
        jclass clazz = com_java_jniautogendemo_NativeClass_00024UserInfo_clazz(env);
        CHECK_CLAZZ(env, obj.obj(),
                    com_java_jniautogendemo_NativeClass_00024UserInfo_clazz(env));

        jni_generator::JniJavaCallContextChecked call_context;
        call_context.Init<
                base::android::MethodID::TYPE_INSTANCE>(
                env,
                clazz,
                "setAge",
                "(I)V",
                &g_com_java_jniautogendemo_NativeClass_00024UserInfo_setAge);

        env->CallVoidMethod(obj.obj(),
                            call_context.base.method_id, as_jint(age));
    }

}  // namespace RongCloud

#endif  // com_java_jniautogendemo_NativeClass_JNI
