// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     io/rong/base/internal/RongJniClassLoader

#ifndef io_rong_base_internal_RongJniClassLoader_JNI
#define io_rong_base_internal_RongJniClassLoader_JNI

#include <jni.h>

#include "../../jni/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_io_rong_base_internal_RongJniClassLoader[];
const char kClassPath_io_rong_base_internal_RongJniClassLoader[] =
    "io/rong/base/internal/RongJniClassLoader";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_io_rong_base_internal_RongJniClassLoader_clazz(nullptr);
#ifndef io_rong_base_internal_RongJniClassLoader_clazz_defined
#define io_rong_base_internal_RongJniClassLoader_clazz_defined
inline jclass io_rong_base_internal_RongJniClassLoader_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_io_rong_base_internal_RongJniClassLoader,
      &g_io_rong_base_internal_RongJniClassLoader_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace RongCloud {
namespace jni {

static std::atomic<jmethodID> g_io_rong_base_internal_RongJniClassLoader_getClassLoader(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_RongJniClassLoader_getClassLoader(JNIEnv*
    env) {
  jclass clazz = io_rong_base_internal_RongJniClassLoader_clazz(env);
  CHECK_CLAZZ(env, clazz,
      io_rong_base_internal_RongJniClassLoader_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getClassLoader",
          "()Ljava/lang/Object;",
          &g_io_rong_base_internal_RongJniClassLoader_getClassLoader);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace jni
}  // namespace RongCloud

#endif  // io_rong_base_internal_RongJniClassLoader_JNI
